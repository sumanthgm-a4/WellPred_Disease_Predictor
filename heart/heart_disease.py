# -*- coding: utf-8 -*-
"""heart_disease.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14rBj4MyEMhnVOG7-9ufgtGMrbWCKY6UT
"""

!pip install lazypredict

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv("heart.csv")

data

data.head(5)

data.tail(5)

data.shape

data.info()

data.isnull().sum()

data.describe()

data['sex'].value_counts()

pd.crosstab(data.target, data.sex)

pd.crosstab(data.target,data.sex).plot(kind="bar")
plt.title("Heart disease frequency for sex")
plt.xlabel("0 = No Disease, 1 = Disease")
plt.ylabel("Amount")
plt.legend(["Female", "Male"])
plt.xticks(rotation = 0)

plt.figure(figsize=(10,6))
plt.scatter(data.age[data.target==1],data.thalach[data.target == 1], c="red")
plt.scatter(data.age[data.target==0],data.thalach[data.target == 0], c="green")

plt.title("Heart Disease in function of Age and Max Heart Rate")
plt.xlabel("Age")
plt.ylabel("Heart Rate")
plt.legend(["Disease", "No Disease"])

data["age"][data["target"] == 1]

pd.crosstab(data.cp,data.target).plot(kind="bar")

plt.title("Heart Disease frequency per chest pain type")
plt.xlabel("Chest Pain Type")
plt.ylabel("Amount")
plt.legend(["No Disease", "Disease"])
plt.xticks(rotation=0)

import seaborn as sns
corr=data.corr()
plt.figure(figsize=(15,15))
sns.heatmap(corr,annot=True)

corr

sns.set_style('whitegrid')
sns.countplot(x = 'target', data = data)

dataset=data.copy()
dataset.head()

X = np.array(dataset.drop(['target'], axis = 1))
y = np.array(dataset['target'])

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 43)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.fit_transform(X_test)

from lazypredict.Supervised import LazyClassifier

clf = LazyClassifier(verbose = 0, ignore_warnings = True, custom_metric = None)

models, predictions = clf.fit(X_train, X_test, y_train, y_test)
models

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier(n_estimators=40)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

y_train_pred = model.predict(X_train)

from sklearn.metrics import confusion_matrix

print("Test confusion matrix: \n", confusion_matrix(y_test, y_pred))
print("Train confusion matrix: \n", confusion_matrix(y_train, y_train_pred))

from sklearn.metrics import accuracy_score
print(f"Accuracy of model is {round(accuracy_score(y_test, y_pred)*100, 2)}%")



import joblib

abc = joblib.dump(value = [scaler, model], filename = "/content/heart_model.pkl")

"""Single prediction"""

sc, rand_for_mod = joblib.load("/content/heart_model.pkl")

model.predict(sc.transform([[52,1,0,125,212,0,1,168,0,1,2,2,3]]))

model.predict(sc.transform([[71,0,0,112,149,0,1,125,0,1.6,1,0,2]]))

